package com.asistp.jms;

import java.util.HashMap;
import java.util.Map;

public abstract class HashTable {
	
	private static Map<String, String[]> codes = new HashMap<>();
	
	static {
		codes.put("1", new String[] {"PeerDown (1)", "protocolDown", "The alarm is raised when the GMPLS peer's Administrative State is Up and the Operational State is Down."});
		codes.put("2", new String[] {"PeerConnectionDown (2)", "connectionDown", "The alarm is raised when the connectionState of this peer changes from Established to a state other than"});
		codes.put("5", new String[] {"PeerGroupDown (5)", "protocolDown", "The alarm is raised when a BGP peer group has an Operational State other than Up, and the"});
		codes.put("6", new String[] {"BgpDown (6)", "protocolDown", "The alarm is raised when a BGP instance has an Operational State other than Up, and the Administrative"});
		codes.put("7", new String[] {"TemperatureThresholdCrossed (7)", "equipmentOverheated", "The alarm is raised when a temperature crosses a threshold."});
		codes.put("8", new String[] {"EquipmentRemoved (8)", "replaceableEquipmentRemoved", "The alarm is raised when the compositeEquipmentState attribute has a value of equipmentMissing."});
		codes.put("9", new String[] {"EquipmentMismatch (9)", "equipmentTypeMismatch", "The alarm is raised when the compositeEquipmentState attribute has a value of equipmentMismatch."});
		codes.put("10", new String[] {"EquipmentDown (10)", "inoperableEquipment", "The alarm is raised when the compositeEquipmentState attribute has a value of"});
		codes.put("11", new String[] {"EquipmentInTest (11)", "equipmentInTest", "The alarm is raised when equipment enters a diagnostic state."});
		codes.put("12", new String[] {"LinkDown (12)", "portLinkProblem", "The alarm is raised when a port has no associated physical link or remote end point is operationally down."});
		codes.put("19", new String[] {"IsisDown (19)", "protocolDown", "The alarm is raised when an IS-IS site has an Operational State other than Up, and the Administrative"});
		codes.put("20", new String[] {"LagDown (20)", "lagDown", "The alarm is raised when all ports in a LAG are operationally down."});
		codes.put("22", new String[] {"LdpDown (22)", "protocolDown", "The alarm is raised when an LDP site has an Operational State other than Up, and the Administrative State"});
		codes.put("23", new String[] {"LdpTargetedPeerDown (23)", "protocolDown", "The alarm is raised when an LDP targeted peer is operationally down."});
		codes.put("25", new String[] {"LspDown (25)", "lspDown", "The alarm is raised when the Operational State of an LSP is Down, but the Administrative State is Up."});
		codes.put("26", new String[] {"LspPathDown (26)", "lspPathDown", "The alarm is raised when an LSP path is operationally down."});
		codes.put("27", new String[] {"MplsDown (27)", "protocolDown", "The alarm is raised when an MPLS site has an Operational State other than Up, and the Administrative"});
		codes.put("30", new String[] {"TunnelDown (30)", "tunnelDown", "The alarm is raised when an MPLS path has an Operational State other than Up, and the Administrative"});
		codes.put("38", new String[] {"AreaTypeMismatch (38)", "areaTypeMisconfigured", "The alarm is raised when an OSPF area on one NE is configured as an NSSA and the same OSPF area"});
		codes.put("69", new String[] {"GroupDown (69)", "protocolDown", "The alarm is raised when a RIP group has an Operational State other than Up, and the Administrative"});
		codes.put("72", new String[] {"RipDown (72)", "protocolDown", "The alarm is raised when a RIP site has an Operational State other than Up, and the Administrative State"});
		codes.put("73", new String[] {"SessionDown (73)", "interfaceDown", "The alarm is raised when an RSVP session is operationally down."});
		codes.put("74", new String[] {"RsvpDown (74)", "protocolDown", "The alarm is raised when an RSVP site has an Operational State other than Up, and the Administrative"});
		codes.put("83", new String[] {"LossOfClock (83)", "lossOfClock", "The alarm is raised when a SONET port reports an LOC condition, which causes the NE to set the port"});
		codes.put("84", new String[] {"LineAlarmIndicationSignal (84)", "lineAlarmIndicationSignal", "The alarm is raised when a SONET port reports an LAIS error. The alarm corresponds to the lais alarm on"});
		codes.put("85", new String[] {"LineRemoteDefectIndication", "lineRemoteDefectIndication", "The alarm is raised when a SONET port reports a line remote defect indication error caused by an LOF,"});
		codes.put("86", new String[] {"SectionS1Failure (86)", "sectionS1Failure", "The alarm is raised when a SONET port reports a section synchronization failure. A section"});
		codes.put("87", new String[] {"SectionB1Error (87)", "sectionB1Error", "The alarm is raised when a SONET port reports a section error condition that a remote NE raises because"});
		codes.put("88", new String[] {"BerLineSignalDegradation", "berLineSignalDegradation", "The alarm is raised when a SONET port reports a line signal degradation BER error. The alarm"});
		codes.put("89", new String[] {"BerLineSignalFailure (89)", "berLineSignalFailure", "The alarm is raised when a SONET port reports a line signal degradation BER error. The alarm"});
		codes.put("90", new String[] {"SectionLossOfFrame (90)", "sectionLossOfFrame", "The alarm is raised when a SONET port reports a SLOF error. The alarm corresponds to the slof alarm on"});
		codes.put("91", new String[] {"SectionLossOfSignal (91)", "sectionLossOfSignal", "The alarm is raised when a SONET port reports a SLOS error. The alarm corresponds to the slos alarm on"});
		codes.put("92", new String[] {"TxSectionSynchronizationError (92)", "txSectionSynchronizationError", "The alarm is raised when a SONET port reports an SS1F error. The alarm corresponds to the ss1f alarm"});
		codes.put("93", new String[] {"RxSectionSynchronizationError (93)", "rxSectionSynchronizationError", "The alarm is raised when a SONET port reports a section synchronization failure. A section"});
		codes.put("94", new String[] {"LineErrorCondition (94)", "lineErrorCondition", "The alarm is raised when a SONET port reports a line error condition that a remote NE raises because of"});
		codes.put("97", new String[] {"ServiceSiteDown (97)", "siteDown", "The alarm is raised when all SAPs on a site are operationally down, or when the service tunnels for the site"});
		codes.put("98", new String[] {"LabelProblem (98)", "labelProblem", "The alarm is raised when an ingress or an egress label is missing."});
		codes.put("100", new String[] {"KeepAliveProblem (100)", "keepAliveFailed", "The alarm is raised when the 5620 SAM detects a keep-alive protocol status of senderIdInvalid or"});
		codes.put("112", new String[] {"DS1E1AlarmIndicationSignal", "alarmIndicationSignal", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has an AIS alarm condition."});
		codes.put("114", new String[] {"DS1E1ResourceAvailabilityIndicator", "resourceAvailabilityIndicator", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has an RAI alarm condition."});
		codes.put("115", new String[] {"DS3E3AlarmIndicationSignal", "alarmIndicationSignal", "The alarm is raised when an NE reports that a specific DS3 or E3 channel has an AIS alarm condition."});
		codes.put("116", new String[] {"DS3E3LossOfSignal (116)", "lossOfSignal", "The alarm is raised when an NE reports that a specific DS3 or E3 channel has an LOS alarm condition."});
		codes.put("117", new String[] {"DS3E3OutOfFrame (117)", "outOfFrame", "The alarm is raised when an NE reports that a specific DS3 or E3 channel has an OOF alarm condition."});
		codes.put("119", new String[] {"DS3E3ResourceAvailability", "resourceAvailabilityIndicator", "The alarm is raised when an NE reports that a specific DS3 or E3 channel has an RAI alarm condition."});
		codes.put("120", new String[] {"DS3E3Looped (120)", "farEndLoopback", "The alarm is raised when an NE reports that a specific DS3 or E3 channel has a remote loopback alarm"});
		codes.put("121", new String[] {"NeighborDown (121)", "NeighborDown", "The alarm is raised when an OSPF interface neighbor is operationally Down."});
		codes.put("122", new String[] {"VirtualLinkDown (122)", "VirtualLinkDown", "The alarm is raised when a virtual link is Down."});
		codes.put("123", new String[] {"VirtualNeighborDown (123)", "VirtualNeighborDown", "The alarm is raised when a neighbor virtual link is operationally down."});
		codes.put("124", new String[] {"DS1E1LossOfSignal (124)", "lossOfSignal", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has an LOS alarm condition."});
		codes.put("125", new String[] {"DS1E1OutOfFrame (125)", "outOfFrame", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has an OOF alarm condition."});
		codes.put("126", new String[] {"DS1E1Looped (126)", "farEndLoopback", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has a remote loopback alarm"});
		codes.put("129", new String[] {"SonetPathAlarmIndicationSignal (129)", "pathAlarmIndicationSignal", "The alarm is raised when a SONET port reports a PAIS error. The alarm corresponds to the pais alarm on"});
		codes.put("130", new String[] {"SonetPathLossOfPointer (130)", "pathLossOfPointer", "The alarm is raised when a SONET port reports a PLOP error. The alarm corresponds to the plop alarm on"});
		codes.put("131", new String[] {"SonetPathRemoteDefectIndication (131)", "pathRemoteDefectIndication", "The alarm is raised when a SONET port reports a remote PAIS error. The alarm corresponds to the pais"});
		codes.put("132", new String[] {"SonetPathB3Error (132)", "Release:", "The alarm is raised when a SONET port reports a path error condition because of b3 errors. The alarm"});
		codes.put("133", new String[] {"SonetPathPayloadMismatch", "pathPayloadMismatch", "The alarm is raised when a SONET port reports a PPLM error on a channel, after which the channel is set"});
		codes.put("134", new String[] {"SonetPathRemoteB3Error", "pathRemoteB3Error", "The alarm is raised when a SONET port reports a path error condition that a remote NE raises because of"});
		codes.put("141", new String[] {"OspfInterfaceDown (141)", "OspfInterfaceDown", "The alarm is raised when an OSPF interface is operationally down."});
		codes.put("142", new String[] {"RouteDistinguisherNotConfigured (142)", "routeDistinguisherNotConfigured", "The alarm is raised when no RD is configured for an L3 service site."});
		codes.put("143", new String[] {"SonetPathUnequippedPathError (143)", "pathUnequippedPathError", "The alarm is raised when a SONET port reports a path unequipped error. The alarm corresponds to the"});
		codes.put("145", new String[] {"EquipmentFailure (145)", "cardFailure", "The alarm is raised when a I/O card or control processor or power-supply tray reports a failure. When the"});
		codes.put("152", new String[] {"BundleDown (152)", "bundleDown", "The alarm is raised when the bundle Administrative State is Up and the Operational State is Down."});
		codes.put("153", new String[] {"IsisAdjacencyDown (153)", "IsisInterfaceDown", "The alarm is raised when an IS-IS interface has no adjacencies, for example, because the IS-IS protocol"});
		codes.put("158", new String[] {"IgmpDown (158)", "protocolDown", "The alarm is raised when an IGMP site has an Operational State other than Up, and the Administrative"});
		codes.put("162", new String[] {"MvrSiteDown (162)", "protocolDown", "The alarm is raised when MVR is disabled on an NE and a TLS VLAN or MVR VLAN service is provisioned"});
		codes.put("164", new String[] {"ForwardingTableSizeLimitReached (164)", "resourceLimitReached", "The alarm is raised when the number of MAC address entries in the FIB reaches or exceeds the VPLS site"});
		codes.put("184", new String[] {"PimDown (184)", "protocolDown", "The alarm is raised when a PIM site is administratively Up but operationally Down. The alarm is cleared"});
		codes.put("191", new String[] {"PrimaryImageBootFailure", "bootOptionFileMisconfigured", "The alarm is raised when the primary software image specified in an NE BOF is unusable."});
		codes.put("210", new String[] {"CcagDown (210)", "CcagDown", "The alarm is raised when the CCAG Administrative State is Up and the Operational State is Down."});
		codes.put("219", new String[] {"MvrConfiguredFromVplsNotExist (219)", "MvrConfiguredFromVplsNotExist", "The alarm is raised when an MVR source is an MVR VPLS that does not exist. The alarm clears when the"});
		codes.put("220", new String[] {"MvrConfiguredProxySapNotExist (220)", "MvrConfiguredProxySapNotExist", "The alarm is raised when a configured MVR proxy SAP does not exist. The alarm clears when the proxy"});
		codes.put("221", new String[] {"SdpBindingDown (221)", "SdpBindingNotReady", "The alarm is raised when an SDP binding has an Operational State other than Up."});
		codes.put("222", new String[] {"SdpBindingTunnelDown (222)", "SdpTunnelNotReady", "The alarm is raised when an SDP binding tunnel has an Operational State other than Up."});
		codes.put("248", new String[] {"SonetPathLossOfCodegroupDelineationError (248)", "pathLossOfCodegroupDelineationError", "The alarm is raised when a SONET port reports a PLCD error. The alarm corresponds to the plcd alarm on"});
		codes.put("249", new String[] {"AccessInterfaceDown (249)", "interfaceDown", "The alarm is raised when an L2 or L3 interface operational state is Down. The alarm is not raised against"});
		codes.put("255", new String[] {"upgradedCardAlarm (255)", "upgradedCard", "The alarm is raised when the standby CPM is rebooted and operational after a software upgrade. A device"});
		codes.put("256", new String[] {"downgradedCardAlarm (256)", "downgradedCard", "The alarm is raised when an IOM is not upgraded or reset after a device software upgrade of both CPMs."});
		codes.put("264", new String[] {"LspPathBypassTunnelActive", "LspPathReroutedToBypassTunnel", "The alarm is raised when an LSP primary path is rerouted to the bypass tunnel. The alarm clears when the"});
		codes.put("273", new String[] {"scriptBackupLost (273)", "backupDown", "The alarm is raised when the primary subscriber identification script URL is operationally up, but a"});
		codes.put("274", new String[] {"backupScriptInUse (274)", "backupInUse", "The alarm is raised when the primary subscriber identification script is operationally down, but one of the"});
		codes.put("275", new String[] {"noFunctioningScript (275)", "primaryBackupDown", "The alarm is raised when all subscriber identification scripts are operationally down."});
		codes.put("276", new String[] {"HostConnectivityLostRateExceeded (276)", "Applicable probable causes:", "The alarm is raised when the trapDroppedRaisesAlarm parameter is enabled and the maximum allowed"});
		codes.put("284", new String[] {"InstanceDown (284)", "instanceDown", "The alarm is raised when the 5620 SAM detects that an SRRP instance is operationally down."});
		codes.put("291", new String[] {"MissingLocalEntry (291)", "Protected_Mac_Address_Not_Global", "The alarm is raised when a protected MAC address is not configured on all sites of a VPLS. This can occur"});
		codes.put("294", new String[] {"IncompleteConfig (294)", "incompleteConfig", "The alarm is raised when a peer configuration cannot be found on the peer NE."});
		codes.put("295", new String[] {"AsymmetricalConfig (295)", "asymmetricalConfig", "The alarm is raised when there is a peer configuration mismatch that prevents MC operation."});
		codes.put("297", new String[] {"StpExceptionCondition (297)", "StpException", "The alarm is raised when a SAP detects an STP exception condition, for example, one-way communication"});
		codes.put("301", new String[] {"IsisInterfaceDown (301)", "protocolDown", "The alarm is raised when an IS-IS interface has an Operational State other than Up."});
		codes.put("303", new String[] {"EthernetPortSignalFailure", "SignalFailure", "The alarm is raised when a device reports a signal failure on an Ethernet port."});
		codes.put("304", new String[] {"EthernetPortRemoteFault", "RemoteFault", "The alarm is raised when a device reports a remote fault on an Ethernet port."});
		codes.put("305", new String[] {"EthernetPortLocalFault (305)", "LocalFault", "The alarm is raised when a device reports a local fault on an Ethernet port."});
		codes.put("306", new String[] {"EthernetPortNoFrameLock", "NoFrameLock", "The alarm is raised when a device reports No Frame Lock on an Ethernet port."});
		codes.put("307", new String[] {"EthernetPortHighBer (307)", "HighBer", "The alarm is raised when a device reports a high bit-error rate on an Ethernet port."});
		codes.put("353", new String[] {"MsdpDown (353)", "protocolDown", "The alarm is raised when an MSDP site is administratively down. The alarm clears when the site is"});
		codes.put("362", new String[] {"PppLoopbackDetected (362)", "PppLoopbackDetected", "The alarm is raised when the value of tmnxPppLocalMagicNumber is the same as the value of"});
		codes.put("363", new String[] {"RadiusAcctPlcyFailure (363)", "radiusAccountingRequestFailure", "The alarm is raised when a RADIUS accounting request is not successfully sent to any of the RADIUS"});
		codes.put("388", new String[] {"OverTemperatureDetected", "equipmentOverheated", "The alarm is raised when the chassis temperature exceeds the maximum threshold value."});
		codes.put("394", new String[] {"MCLagDown (394)", "mcLagDown", "The alarm is raised when all ports in an MC LAG are operationally Down."});
		codes.put("422", new String[] {"LagPortAddFailed (422)", "linkDown", "The alarm is raised when the Lag Port Add function Fails."});
		codes.put("440", new String[] {"SubscriberInterfaceDown", "interfaceDown", "The alarm is raised when a subscriber interface is operationally down. The alarm clears when the"});
		codes.put("441", new String[] {"GroupInterfaceDown (441)", "interfaceDown", "The alarm is raised when the 5620 SAM detects that a group interface is operationally down. The alarm"});
		codes.put("445", new String[] {"CesStrayPkts (445)", "strayPackets", "The alarm is raised when the 5620 SAM detects received stray packets."});
		codes.put("446", new String[] {"CesMalformedPkts (446)", "malformedPackets", "The alarm is raised when the 5620 SAM detects one or more malformed packets."});
		codes.put("447", new String[] {"CesPktLoss (447)", "lossOfPacket", "The alarm is raised when the 5620 SAM detects a packet loss."});
		codes.put("448", new String[] {"CesBfrOverrun (448)", "bufferOverrun", "The alarm is raised when the 5620 SAM detects a jitter buffer overrun."});
		codes.put("449", new String[] {"CesBfrUnderrun (449)", "bufferOverrun", "The alarm is raised when the 5620 SAM detects a jitter buffer underrun."});
		codes.put("450", new String[] {"CesRmtPktLoss (450)", "farEndLossOfPacket", "The alarm is raised when the 5620 SAM detects a remote packet loss."});
		codes.put("451", new String[] {"CesRmtTdmFault (451)", "tdmFarEndFault", "The alarm is raised when the 5620 SAM detects a remote TDM fault."});
		codes.put("452", new String[] {"CesRmtRdi (452)", "farEndRdi", "The alarm is raised when the 5620 SAM detects a remote RDI."});
		codes.put("455", new String[] {"EquipmentAdministrativelyDown (455)", "equipmentAdministrativelyDown", "The alarm is raised when the compositeEquipmentState attribute has a value of"});
		codes.put("457", new String[] {"PrimaryPathLimitReached", "resourceLimitReached", "The alarm is raised when the Ingress Multicast Path Management primary path bandwidth limit is reached."});
		codes.put("458", new String[] {"SecondaryPathLimitReached", "resourceLimitReached", "The alarm is raised when the Ingress Multicast Path Management secondary path bandwidth limit is"});
		codes.put("459", new String[] {"AncillaryPathLimitReached", "resourceLimitReached", "The alarm is raised when the Ingress Multicast Path Management ancillary path bandwidth limit is reached."});
		codes.put("461", new String[] {"TmnxEqPortEtherLoopDetected (461)", "HighBer", "The alarm is raised when a device detects a physical loop on an Ethernet port."});
		codes.put("464", new String[] {"ContainingEquipmentMismatch (464)", "containingEquipmentMismatch", "The alarm is raised when the compositeEquipmentState attribute has a value of"});
		codes.put("465", new String[] {"ContainingEquipmentOperationallyDown (465)", "containingEquipmentDown", "The alarm is raised when the compositeEquipmentState attribute has a value of"});
		codes.put("466", new String[] {"ContainingEquipmentAdministrativelyDown (466)", "containingEquipmentAdministrativelyDown", "The alarm is raised when the compositeEquipmentState attribute has a value of"});
		codes.put("472", new String[] {"DDMTemperatureLowWarning", "temperatureLowWarning", "The alarm is raised when the temperature of an SFP or XFP approaches the maximum threshold value."});
		codes.put("473", new String[] {"DDMTemperatureLowAlarm", "temperatureLowAlarm", "The alarm is raised when the temperature of an SFP or XFP reaches the maximum threshold value."});
		codes.put("474", new String[] {"DDMTemperatureHighWarning", "temperatureHighWarning", "The alarm is raised when the temperature of an SFP or XFP approaches the maximum threshold value."});
		codes.put("475", new String[] {"DDMTemperatureHighAlarm", "temperatureHighAlarm", "The alarm is raised when the temperature of an SFP or XFP reaches the maximum threshold value."});
		codes.put("476", new String[] {"DDMSupplyVoltageLowWarning (476)", "supplyVoltageLowWarning", "The alarm is raised when the supply voltage of an SFP or XFP approaches the maximum threshold value."});
		codes.put("477", new String[] {"DDMSupplyVoltageLowAlarm", "supplyVoltageLowAlarm", "The alarm is raised when the supply voltage of an SFP or XFP reaches the maximum threshold value."});
		codes.put("478", new String[] {"DDMSupplyVoltageHighWarning (478)", "supplyVoltageHighWarning", "The alarm is raised when the supply voltage of an SFP or XFP approaches the maximum threshold value."});
		codes.put("479", new String[] {"DDMSupplyVoltageHighAlarm", "supplyVoltageHighAlarm", "The alarm is raised when the supply voltage of an SFP or XFP reaches the maximum threshold value."});
		codes.put("480", new String[] {"DDMTxBiasCurrentLowWarning (480)", "txBiasCurrentLowWarning", "The alarm is raised when the transmit bias current of an SFP or XFP approaches the maximum threshold"});
		codes.put("481", new String[] {"DDMTxBiasCurrentLowAlarm", "txBiasCurrentLowAlarm", "The alarm is raised when the transmit bias current of an SFP or XFP reaches the maximum threshold"});
		codes.put("482", new String[] {"DDMTxBiasCurrentHighWarning (482)", "txBiasCurrentHighWarning", "The alarm is raised when the transmit bias current of an SFP or XFP approaches the maximum threshold"});
		codes.put("483", new String[] {"DDMTxBiasCurrentHighAlarm", "txBiasCurrentHighAlarm", "The alarm is raised when the transmit bias current of an SFP or XFP reaches the maximum threshold"});
		codes.put("484", new String[] {"DDMTxOutputPowerLowWarning (484)", "txOutputPowerLowWarning", "The alarm is raised when the output power of an SFP or XFP approaches the maximum threshold value."});
		codes.put("485", new String[] {"DDMTxOutputPowerLowAlarm", "txOutputPowerLowAlarm", "The alarm is raised when the output power of an SFP or XFP reaches the maximum threshold value."});
		codes.put("486", new String[] {"DDMTxOutputPowerHighWarning (486)", "txOutputPowerHighWarning", "The alarm is raised when the output power of an SFP or XFP approaches the maximum threshold value."});
		codes.put("487", new String[] {"DDMTxOutputPowerHighAlarm (487)", "txOutputPowerHighAlarm", "The alarm is raised when the output power of an SFP or XFP reaches the maximum threshold value."});
		codes.put("488", new String[] {"DDMRxOpticalPowerLowWarning (488)", "rxOpticalPowerLowWarning", "The alarm is raised when the received optical power of an SFP or XFP approaches the minimum threshold"});
		codes.put("489", new String[] {"DDMRxOpticalPowerLowAlarm (489)", "rxOpticalPowerLowAlarm", "The alarm is raised when the received optical power of an SFP or XFP reaches the minimum threshold"});
		codes.put("490", new String[] {"DDMRxOpticalPowerHighWarning (490)", "rxOpticalPowerHighWarning", "The alarm is raised when the received optical power of an SFP or XFP approaches the maximum threshold"});
		codes.put("491", new String[] {"DDMRxOpticalPowerHighAlarm (491)", "rxOpticalPowerHighAlarm", "The alarm is raised when the received optical power of an SFP or XFP reaches the maximum threshold"});
		codes.put("492", new String[] {"DDMAux1LowWarning (492)", "aux1LowWarning", "The alarm is raised when the manufacturer-specific Auxiliary 1 of the XFP approaches the minimum"});
		codes.put("493", new String[] {"DDMAux1LowAlarm (493)", "aux1LowAlarm", "The alarm is raised when the manufacturer-specific Auxiliary 1 of the XFP reaches the minimum threshold"});
		codes.put("494", new String[] {"DDMAux1HighWarning (494)", "aux1HighWarning", "The alarm is raised when the manufacturer-specific Auxiliary 1 of the XFP approaches the maximum"});
		codes.put("495", new String[] {"DDMAux1HighAlarm (495)", "aux1HighAlarm", "The alarm is raised when the manufacturer-specific Auxiliary 1 of the XFP reaches the maximum threshold"});
		codes.put("496", new String[] {"DDMAux2LowWarning (496)", "aux2LowWarning", "The alarm is raised when the manufacturer-specific Auxiliary 2 of the XFP approaches the minimum"});
		codes.put("497", new String[] {"DDMAux2LowAlarm (497)", "aux2LowAlarm", "The alarm is raised when the manufacturer-specific Auxiliary 2 of the XFP reaches the minimum threshold"});
		codes.put("498", new String[] {"DDMAux2HighWarning (498)", "aux2HighWarning", "The alarm is raised when the manufacturer-specific Auxiliary 2 of the XFP approaches the maximum"});
		codes.put("499", new String[] {"DDMAux2HighAlarm (499)", "aux2HighAlarm", "The alarm is raised when the manufacturer-specific Auxiliary 2 of the XFP reaches the maximum threshold"});
		codes.put("500", new String[] {"DS1E1SignalDegradation", "signalDegradation", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has an SD alarm condition."});
		codes.put("501", new String[] {"DS1E1SignalFailure (501)", "signalFailure", "The alarm is raised when an NE reports that a specific DS1 or E1 channel has an SF alarm condition."});
		codes.put("502", new String[] {"RemoteMepCCMAlarm (502)", "missingRemoteMep", "The alarm is raised when a MEP loses connectivity with one or more remote MEPs. The Remote MEP DB"});
		codes.put("503", new String[] {"StpRootGuardViolation (503)", "spanningTreeTopologyChanged", "The alarm is raised when a SAP detects an STP root guard violation."});
		codes.put("516", new String[] {"SubnetMinFreeExc (516)", "actualFreeAddrBelowSubnetMin", "The alarm is raised when the actual number of free addresses in a subnet falls below the desired minimum"});
		codes.put("520", new String[] {"MultiChassisRingDown (520)", "ringDown", "The alarm is raised when a MC ring group Operational State is not in the Connected state. The alarm is"});
		codes.put("521", new String[] {"LocalRncvOperDown (521)", "localRncvDisconnected", "The alarm is raised when the local RNCV Operational State of a ring node is other than Connected or"});
		codes.put("522", new String[] {"RemoteRncvOperDown (522)", "remoteRncvDisconnected", "The alarm is raised when the remote RNCV Operational State of a ring node is other than Connected or"});
		codes.put("523", new String[] {"TunnelAdministrativelyDown", "tunnelAdministrativelyDown", "The alarm is raised when the 5620 SAM detects that an MPLS path is administratively down."});
		codes.put("542", new String[] {"PowerSupplyRemoved (542)", "PowerSupplyRemoved", "The alarm is raised when a chassis power supply is removed."});
		codes.put("547", new String[] {"BITSNotQualified (547)", "timingReferenceNotQualified", "The alarm is raised when the BITS/BITS1 timing reference on an NE is not in the Qualified state."});
		codes.put("548", new String[] {"ExternalTimingReferenceNotQualified (548)", "timingReferenceNotQualified", "The alarm is raised when the External timing reference on an NE is not in the Qualified state."});
		codes.put("569", new String[] {"FanTrayRemoved (569)", "FanTrayRemoved", "The alarm is raised when the deviceState attribute has a value of deviceNotEquipped."});
		codes.put("573", new String[] {"XplError (573)", "xplError", "The alarm is raised when an MDA reports persistent XPL Errors."});
		codes.put("574", new String[] {"MrpAttrTblSizeLimitReached", "resourceLimitReached", "The alarm is raised when the number of MRP attribute table entries for a service site exceeds the high"});
		codes.put("587", new String[] {"MldDown (587)", "protocolDown", "The alarm is raised when an MLD site has an Operational State other than Up, and the Administrative"});
		codes.put("604", new String[] {"EquipmentDegraded (604)", "singleFanFailure", "The alarm is raised when a single fan fails. The chassis attempts to continue operating within the normal"});
		codes.put("609", new String[] {"IncorrectNeighborConfig (609)", "incorrectNeighborConfig", "The alarm is raised when the peer does not exist or the neighbor address does not point to a network"});
		codes.put("624", new String[] {"FanFailure (624)", "fanFailure", "The alarm is raised when the associated fan is not operationally Up."});
		codes.put("633", new String[] {"PowerSupplyFailure (633)", "powerSupplyFailure", "The alarm is raised when a power-supply tray reports a failure. When the alarm is raised during device"});
		codes.put("647", new String[] {"IsaAaGrpDown (647)", "IsaAaGrpDown", "The alarm is raised when an ISA-AA group Operational State is Down, and the Administrative State is Up."});
		codes.put("648", new String[] {"CircuitStpExceptionCondition", "StpException", "The alarm is raised when an NE detects an STP exception condition on a SAP, for example, one-way"});
		codes.put("661", new String[] {"InterfaceNeighborDown (661)", "NeighborDown", "The alarm is raised when an interface neighbor is operationally down."});
		codes.put("665", new String[] {"ShamLinkDown (665)", "ShamLinkDown", "The alarm is raised when a sham link is operationally down."});
		codes.put("753", new String[] {"MigrationCompleted (753)", "migrationComplete", "The alarm is raised when a card migration event completes."});
		codes.put("754", new String[] {"MigrationFailed (754)", "migrationFailure", "The alarm is raised when a card migration event fails."});
		codes.put("775", new String[] {"IsaVideoGrpDown (775)", "IsaVideoGrpDown", "The alarm is raised when the Operational State of an ISA video group is Down and the Administrative State"});
		codes.put("777", new String[] {"S2LPathBypassTunnelActive", "S2LPathReroutedToBypassTunnel", "The alarm is raised when the bypass tunnel in an S2L path becomes active. The alarm clears when the"});
		codes.put("778", new String[] {"S2LPathDown (778)", "S2LPathDown", "The alarm is raised when the S2L path Administrative State is Up and the Operational State is not Up. The"});
		codes.put("779", new String[] {"IncorrectPeerConfig (779)", "IncorrectPeerConfig", "The alarm is raised when an MC peer does not exist, or when an MC peer exists but the peer address is"});
		codes.put("780", new String[] {"IncorrectPeerSynchronizationPortConfig (780)", "IncorrectPeerSynchronizationPortConfig", "The alarm is raised when the peer port does not exist, or when the peer port exists but the synchronization"});
		codes.put("781", new String[] {"IncorrectPeerSynchronizationPortEncapRangeConfig (781)", "IncorrectPeerSynchronizationPortEncapRangeConfig", "The alarm is raised when the VLAN ranges on the Multi-Chassis synchronization peers do not match."});
		codes.put("782", new String[] {"NoPeerMcRingFound (782)", "IncompleteConfig", "The alarm is raised when the 5620 SAM cannot find the peer MC ring."});
		codes.put("791", new String[] {"WrongCpaaSoftwareVersion", "wrongCpaaSoftwareVersion", "The alarm is raised when the 7701 CPAA software is the wrong version and requires an upgrade."});
		codes.put("794", new String[] {"VideoInterfaceDown (794)", "interfaceDown", "The alarm is raised when a video interface is operationally down. The alarm clears when the video"});
		codes.put("801", new String[] {"EthernetPortConfiguredLoopback (801)", "ethernetPortConfiguredLoopback", "The alarm is raised when a timed loopback is in effect for an Ethernet port."});
		codes.put("821", new String[] {"WaveTrackerEncoderDegrade", "EncoderDegrade", "The alarm is raised when a device reports an encoder degradation on a wavelength tracker interface."});
		codes.put("822", new String[] {"WaveTrackerEncoderFailure", "EncoderFailure", "The alarm is raised when a device reports an encoder failure on a wavelength tracker interface."});
		codes.put("823", new String[] {"WaveTrackerPowerControlDegrade (823)", "PowerControlDegrade", "The alarm is raised when a device reports a power control degradation on a wavelength tracker interface."});
		codes.put("824", new String[] {"WaveTrackerPowerControlFailure (824)", "PowerControlFailure", "The alarm is raised when a device reports a power control failure on a wavelength tracker interface."});
		codes.put("825", new String[] {"WaveTrackerPowerControlHighlimit (825)", "PowerControlHighlimit", "The alarm is raised when a device reports a power control high limit on a wavelength tracker interface."});
		codes.put("826", new String[] {"WaveTrackerPowerControllowlimit (826)", "PowerControllowlimit", "The alarm is raised when a device reports a power control low limit on a wavelength tracker interface."});
		codes.put("827", new String[] {"IGHMisconfigured (827)", "IGHProtocolMismatch", "The alarm is raised when the IGH is administratively up but none of the IGH protocols is operationally up."});
		codes.put("830", new String[] {"IPSecGatewayDown (830)", "gatewayDown", "The alarm is raised when the Operational State of a SAP IPsec gateway changes to Down and the"});
		codes.put("831", new String[] {"IPSecTunnelBfdConnectionBroken (831)", "bfdSessionConnectionBroken", "The alarm is raised when the BFD connection to a peer times out."});
		codes.put("832", new String[] {"IPSecTunnelBfdConnectionDown (832)", "bfdSessionDown", "The alarm is raised when the Operational State of a BFD session is Not Connected."});
		codes.put("833", new String[] {"IPSecTunnelBfdConnectionPeerDetectsDown (833)", "bfdSessionConnectionPeerDetectsDown", "The alarm is raised when a BFD peer detects a connection timeout."});
		codes.put("834", new String[] {"IPSecTunnelDown (834)", "tunnelDown", "The alarm is raised when the IPsec tunnel operational state changes to 'down' and the administrative state"});
		codes.put("836", new String[] {"IsaAaSubUnassigned (836)", "IsaAaSubUnassigned", "The alarm is raised when a subscriber cannot be assigned to an ISA-AA MDA in an AA group because of"});
		codes.put("841", new String[] {"L2TPDown (841)", "protocolDown", "The alarm is raised when an L2TP site becomes administratively down. The alarm clears when the L2TP"});
		codes.put("842", new String[] {"PeerUnreachable (842)", "protocolDown", "The alarm is raised when an L2TP peer becomes unreachable."});
		codes.put("843", new String[] {"SingleSFMOverloadDetected", "signleSfmOverloadDetected", "The alarm is raised when a device reports a single-SFM overload. The alarm clears when the VR exits the"});
		codes.put("844", new String[] {"AGWDiameterPeerDown (844)", "EPSPeerDown", "The alarm is raised when the path management state of a Diameter peer changes to a state other than Up."});
		codes.put("1064", new String[] {"MobileConnectorDown (1064)", "EpcDown", "The alarm is raised when the 5620 SAM no longer manages the EPS path instance of this mobile service"});
		codes.put("1066", new String[] {"MplsPathUpdateFailed (1066)", "mbbRetryExceeded", "The alarm is raised when an MPLS path update fails because of an MBB problem. The alarm clears when"});
		codes.put("1068", new String[] {"IncorrectEndPointPeerConfig", "incompleteEPPeerConfig", "The alarm is raised when a peer configuration cannot be found on the peer NE."});
		codes.put("1069", new String[] {"MCPeerEPDown (1069)", "MCPeerEPDown", "The alarm is raised when an MC endpoint is operationally down."});
		codes.put("1070", new String[] {"NatIsaMemberSessionUsageHigh (1070)", "resourceFull", "Deprecated in 10.0, Use {NatIsaMemberSessionUsageHi on nat.IsaMember} instead. The alarm is raised"});
		codes.put("1070", new String[] {"NatL2AwSubSessionUsageHigh", "resourceFull", "The alarm is raised when the session usage of an L2-aware NAT subscriber reaches the high or low"});
		codes.put("1074", new String[] {"NatPlL2AwBlockUsageHigh", "resourceFull", "The alarm is raised when the block usage of an L2-aware NAT address pool reaches the high watermark."});
		codes.put("1075", new String[] {"NatPlLsnMemberBlockUsageHigh (1075)", "resourceFull", "The alarm is raised when the block usage of a large-scale NAT address pool reaches the high watermark."});
		codes.put("1086", new String[] {"NatL2AwSubIcmpPortUsageHigh", "resourceFull", "The alarm is raised when the ICMP port usage of an L2-aware NAT subscriber reaches the high or low"});
		codes.put("1088", new String[] {"NatL2AwSubTcpPortUsageHigh", "resourceFull", "The alarm is raised when the TCP port usage of an L2-aware NAT subscriber reaches the high or low"});
		codes.put("1089", new String[] {"NatL2AwSubUdpPortUsageHigh", "resourceFull", "The alarm is raised when the UDP port usage of an L2-aware NAT subscriber reaches the high or low"});
		codes.put("1119", new String[] {"IsaLnsGrpDown (1119)", "IsaLnsGrpDown", "The alarm is raised when the Operational State of an ISA-LNS group is Down and the Administrative State"});
		codes.put("1125", new String[] {"AtcaPowerSupplyFailure", "fanFailure", "The alarm is raised when the associated power supply is not operationally Up."});
		codes.put("1127", new String[] {"LowTemperatureDetected", "equipmentOvercooled", "The alarm is raised when the chassis temperature falls below the minimum threshold."});
		codes.put("1128", new String[] {"LowTemperatureThresholdCrossed (1128)", "equipmentOvercooled", "The alarm is raised when a low-temperature threshold is crossed."});
		codes.put("1941", new String[] {"BITS2NotQualified (1941)", "timingReferenceNotQualified", "The alarm is raised when the BITS2 timing reference on an NE is not in the Qualified state."});
		codes.put("1950", new String[] {"BITSReferenceLossOfSignal", "BITSReferenceLossOfSignal", "The alarm is raised when the BITS/BITS1 reference on an NE is not qualified due to Loss of Signal."});
		codes.put("1951", new String[] {"BITSReferenceOutOfFrequency (1951)", "BITSReferenceOutOfFrequency", "The alarm is raised when the BITS/BITS1 Reference on an NE is not qualified due to Out of frequency."});
		codes.put("1952", new String[] {"BITSReferenceOutOfPollInRange (1952)", "BITSReferenceOutOfPollInRange", "The alarm is raised when the BITS/BITS1 Reference on an NE is not qualified state due to Out of poll in"});
		codes.put("1987", new String[] {"CardDegrade (1987)", "EqptDgr", "The alarm is raised when Card degrade - device is detected."});
		codes.put("2923", new String[] {"NodeDatabaseFallbackDetected (2923)", "nodeDatabaseFallback", "The alarm is raised when a configuration fallback is detected on the node and comes back up with a"});
		codes.put("2924", new String[] {"NodeDatabaseMisalignmentDetected (2924)", "nodeDatabaseMisalignment", "The alarm is raised when a configuration misalignment has been detected on the node and comes back up"});
		codes.put("2929", new String[] {"PeerLacIngressEgressFault", "peerPWStatusBitsChanged", "The alarm is raised when the Peer Status is Peer LAC Rx Fault and Peer LAC Tx Fault"});
		codes.put("2930", new String[] {"AaPolicerResourcesExceeded", "", "The alarm is raised when Application Assurance configured override values exceed policer resources."});
		codes.put("2937", new String[] {"ServerLeaseDefaultTimers", "LeaseTimerInconsistent", "The alarm is raised when the system has reverted to default lease timer values for a particular DHCP client"});
		codes.put("2938", new String[] {"ServerMsgTooLong (2938)", "DhcpSvrMsgTooLong", "The alarm is raised when a DHCP message is generated but the message size exceeds either the"});
		codes.put("2945", new String[] {"MepAISReceivedAlarm (2945)", "missingRemoteMep", "The alarm is raised when a MEP receives AIS test frames from one or more of its sub-layer MEPs."});
		codes.put("2954", new String[] {"LdpSessionNonexistent", "LdpSessionDown", "The alarm is raised when an LDP session is non-existent."});
		codes.put("3303", new String[] {"GaPeerDown (3303)", "EPSPeerDown", "The alarm is raised when the path management state of a Ga peer changes to a state other than Up."});
		codes.put("3316", new String[] {"ServerMaxLeasesReached", "DhcpSvrMaxLeasesReached", "The alarm is raised when the maximum number of leases allocated by local DHCP server is reached."});
		codes.put("3326", new String[] {"GRETunnelDown (3326)", "tunnelDown", "The alarm is raised when the IP/GRE tunnel Operational State changes to Down and the Administrative"});
		codes.put("3329", new String[] {"BfdInterfaceConnectionBroken", "bfdSessionConnectionBroken", "The alarm is raised when the BFD connection to a peer times out."});
		codes.put("3330", new String[] {"BfdInterfaceConnectionDown", "bfdSessionDown", "The alarm is raised when the Operational State of a BFD session is Not Connected."});
		codes.put("3331", new String[] {"BfdInterfaceConnectionPeerDetectsDown (3331)", "bfdSessionConnectionPeerDetectsDown", "The alarm is raised when a BFD peer detects a connection timeout."});
		codes.put("3361", new String[] {"IntTempLow (3361)", "IntTempLow", "The alarm is raised when Card under temperature is detected."});
		codes.put("3557", new String[] {"EthernetPortDuplicateLane", "DuplicateLane", "The alarm is raised when a device reports a Duplicate Lane on an Ethernet port."});
		codes.put("3558", new String[] {"EthernetPortNoAmLock", "NoAmLock", "The alarm is raised when a device reports a No Am Lock on an Ethernet port."});
		codes.put("3559", new String[] {"EthernetPortNoBlockLock", "NoBlockLock", "The alarm is raised when a device reports a No Block Lock on an Ethernet port."});
		codes.put("3604", new String[] {"PTPClockNoMasterAlarm", "PTPClockNoMaster", "The alarm is raised when Precision Timing Protocol (PTP) clock does not support PTP timing master."});
		codes.put("3608", new String[] {"PTPPeerLossOfAnnounce", "PTPPeerLossOfAnnounce", "The alarm is raised when the PTP peer is in the 'Packet Timing Signal Fail (Loss Announce)' state. This"});
		codes.put("3609", new String[] {"PTPPeerLossOfSync (3609)", "PTPPeerLossOfSync", "The alarm is raised when the PTP peer is in the 'Packet Timing Signal Fail (Loss Sync)' state. This"});
		codes.put("3611", new String[] {"PTPNotQualified (3611)", "PTPNotQualified", "The alarm is raised when PTP on an NE is not in the Qualified state."});
		codes.put("3613", new String[] {"PTPReferenceLossOfSignal", "PTPReferenceLossOfSignal", "The alarm is raised when the PTP reference on an NE is not qualified due to Loss of Signal."});
		codes.put("3614", new String[] {"PTPReferenceOutOfFrequency (3614)", "PTPReferenceOutOfFrequency", "The alarm is raised when the PTP Reference on an NE is not qualified due to Out of frequency."});
		codes.put("3615", new String[] {"PTPReferenceOutOfPollInRange (3615)", "PTPReferenceOutOfPollInRange", "The alarm is raised when the PTP Reference on an NE is not qualified state due to Out of poll in range."});
		codes.put("3616", new String[] {"SdpEgressIfsNetDomainInConsistent (3616)", "sdpEgressIfsNetDomainInConsistent", "The alarm is raised when the SDP egress interface's consistency state changes to inconsistent."});
		codes.put("3629", new String[] {"EthernetPortCrcFailure (3629)", "ethernetPortCrcFailure", "The alarm is raised when an Ethernet port CRC alarm condition is detected (Signal Degradation Threshold"});
		codes.put("3631", new String[] {"RedundantMepMisconfiguration (3631)", "misconfiguredRedundantMep", "The alarm is raised when an Active and Redundant MEP do not have the same ID, Operational MAC"});
		codes.put("3632", new String[] {"RedundantMepMissing (3632)", "missingRedundantMep", "The alarm is raised when a MEP misses a redundant counterpart on LAG or SAP."});
		codes.put("3685", new String[] {"subHostInconsistentAtmTdOvr", "tmnxSubHostInconsistentAtmTdOvr", "The alarm is raised when an AAA server (e.g. a RADIUS server) specifies an ATM Traffic Descriptor"});
		codes.put("3690", new String[] {"macMoveRateExceeded", "MacMoveRateExceeded", "The alarm is raised when the SAP exceeds the MAC Move Frequency of the service site."});
		codes.put("3692", new String[] {"RadiusOperStatusDown", "radiusOperationStatusDown", "The alarm is raised when all RADIUS servers have gone down."});
		codes.put("3694", new String[] {"MsPwFecRetryExpired (3694)", "msPwFecRetryExpired", "The alarm is raised when a trap is received because of retry expired. The alarm is cleared when the retry"});
		codes.put("3696", new String[] {"PoolMinFreeExc (3696)", "actualFreeAddrBelowPoolMin", "The alarm is raised when the actual number of free addresses in a pool falls below the desired minimum"});
		codes.put("3704", new String[] {"AarpDown (3704)", "aarpDown", "The alarm is raised when the 5620 SAM detects that an AARP is operationally down."});
		codes.put("3706", new String[] {"ObsoleteProtocolInFilter", "obsoleteProtocolInFilter", "The alarm is raised when a local application filter refers to an obsolete application assurance protocol."});
		codes.put("3721", new String[] {"EthCSF (3721)", "EthCSF", "The alarm is raised when a MEP receives a CCM frame with an interface status TLV of 'Down'."});
		codes.put("3742", new String[] {"IgmpMaxSrcsLimitExceeded", "IgmpMaxSrcsLimitExceeded", "The alarm is raised when an attempt is made to configure an IGMP source for a group when the number of"});
		codes.put("3745", new String[] {"IPSecIsaGrpDown (3745)", "IPSecIsaGrpDown", "The alarm is raised when the Operational State of an ISA IPSec group is Down and the Administrative"});
		codes.put("3887", new String[] {"NatIsaGrpDown (3887)", "NatIsaGrpDown", "The alarm is raised when the Operational State of an NAT ISA group is Down and the Administrative State"});
		codes.put("3889", new String[] {"WlanGwResrcProblemDetected (3889)", "resourceFull", "The alarm is raised when there is a resource problem detected while attempting to activate some part of"});
		codes.put("3890", new String[] {"svcMacFdbTabelFull (3890)", "resourceLimitReached", "The alarm is raised when the system limit of FDB records is reached."});
		codes.put("3894", new String[] {"ConfigurationRescueFileDeleteStatus (3894)", "configurationRescueFileDeleteOperationPerformed", "The alarm is raised when a configuration rollback rescue file delete operation is performed."});
		codes.put("3895", new String[] {"ConfigurationRescueFileSaveStatus (3895)", "configurationRescueFileSaveOperationPerformed", "The alarm is raised when a configuration rollback rescue save operation is performed."});
		codes.put("3896", new String[] {"ConfigurationRescueStatus", "configurationRescueOperationPerformed", "The alarm is raised when a configuration rollback rescue operation is performed."});
		codes.put("3897", new String[] {"ConfigurationRollBackFileDeleteStatus (3897)", "configurationRollBackFileDeleteOperationPerformed", "The alarm is raised when a configuration rollback file delete operation is performed."});
		codes.put("3898", new String[] {"ConfigurationRollBackFileSyncStatus (3898)", "configurationRollBackFileSyncOperationPerformed", "The alarm is raised when a configuration rollback CPM sync operation is performed."});
		codes.put("3899", new String[] {"ConfigurationRollBackSaveStatus (3899)", "configurationRollBackSaveOperationPerformed", "The alarm is raised when a configuration rollback save operation is performed."});
		codes.put("3904", new String[] {"AarpInterfaceDown (3904)", "interfaceDown", "The alarm is raised when the 5620 SAM detects that an AARP interface is operationally down."});
		codes.put("3907", new String[] {"TMSInterfaceDown (3907)", "interfaceDown", "The alarm is raised when a TMS interface is operationally down. The alarm clears when the TMS interface"});
		codes.put("3911", new String[] {"CpmProtectionExceedSapIpEntry (3911)", "denialOfService", "The alarm is raised when an IP packet stream has exceeded the per-source limit."});
		codes.put("3913", new String[] {"radiusServerOverloaded", "radiusServerRequestLimitReached", "The alarm is raised when the RADIUS server is overloaded."});
		codes.put("3914", new String[] {"WlanGwIsaGrpDown (3914)", "WlanGwIsaGrpDown", "The alarm is raised when the Operational State of an WLAN GW ISA group is Down and the Administrative"});
		codes.put("3915", new String[] {"WlanGwTuQosProblem (3915)", "resourceFull", "The alarm is raised when a resource issue occurs while creating a WLAN Gateway tunnel QoS"});
		codes.put("3916", new String[] {"WppHostAuthenticationFailed", "portalWppHostAuthenticationFailure", "The alarm is raised when a WPP host cannot be authenticated."});
		codes.put("3937", new String[] {"NatIsaMemberSessionUsageHi (3937)", "resourceFull", "The alarm is raised when the session usage of an ISA-NAT group member reaches the high watermark."});
		codes.put("3938", new String[] {"ActiveAbnormalCondition", "ActiveAbnormalConditionState", "The alarm is an indication for abnormal condition on NE."});
		codes.put("3950", new String[] {"PoolDepleted (3950)", "actualFreeAddrDepleted", "This alarm is generated when the actual number of free addresses in the DHCP Server Address pool"});
		codes.put("3951", new String[] {"ServerDeclineStaticAddr", "DhcpClientHasStaticIpAddress", "The tmnxDhcpSvrDeclineStaticAddr notification is generated when a DHCP decline message is received"});
		codes.put("3952", new String[] {"ServerUserDatabaseUnknown", "CannotFindUserDatabase", "The tmnxDhcpSvrUserDbUnknown notification is generated when the local DHCP server instance drops a"});
		codes.put("3953", new String[] {"SubnetDepleted (3953)", "actualFreeAddrDepleted", "This alarm is generated when the actual number of free addresses in the DHCP Server Subnet becomes"});
		codes.put("4378", new String[] {"P2MPLSPDown (4378)", "P2MPLSPDown", "The alarm is raised when the P2MP LSP Administrative State is Up and the Operational State is Down."});
		codes.put("4382", new String[] {"NatPcpSrvStateDown (4382)", "NatPcpSrvStateDown", "The alarm is raised when the Operational State of an NAT PCP Server Changes"});
		codes.put("4386", new String[] {"ScheduledPollerProblem", "scheduledResyncFailed", "The alarm is raised when the 5620 SAM is unable to poll a network object, for example, because of"});
		codes.put("4387", new String[] {"SubHostLcktLimitReached", "tmnxSubHostLcktLimitReached", "This alarm is raised when the system wide maximum number of lockout hosts is reached."});
		codes.put("4391", new String[] {"SubHostLcktSapLimitReached", "tmnxSubHostLcktSapLimitReached", "This alarm is raised when the maximum number of lockout hosts on a given SAP is reached."});
		codes.put("4392", new String[] {"SpbAdjacencyDown (4392)", "IsisInterfaceDown", "The alarm is raised when an SPB IS-IS interface has no adjacencies, for example, because the IS-IS"});
		codes.put("4393", new String[] {"SpbInterfaceDown (4393)", "protocolDown", "The alarm is raised when an SPB IS-IS interface has an Operational State other than Up."});
		codes.put("4396", new String[] {"SpbSiteDown (4396)", "protocolDown", "The alarm is raised when an SPB site has an Operational State other than Up."});
		codes.put("4399", new String[] {"MgwPeerConnectionStateAlarm (4399)", "MgwPeerConnectionStateAlarm", "This alarm is raised when the state of a connection with a Mobile Gateway has changed. [CAUSE] The"});
		codes.put("4401", new String[] {"PartialResyncProblem (4401)", "partialResyncProblem", "The alarm is raised when a partial resync on an NE fails. For example, when resyncing only some MIB"});
		codes.put("4485", new String[] {"FpgaFail (4485)", "FPGAFAIL", "The alarm is raised when FPGA download failure is detected."});
		codes.put("4487", new String[] {"FpgaTimeout (4487)", "FPGATIMEOUT", "The alarm is raised when FPGA timeout is detected."});
		codes.put("4612", new String[] {"CoherentOpticalModuleFault", "ModuleFault", "The alarm is raised when a device reports module fault on a coherent optical interface."});
		codes.put("4613", new String[] {"CoherentOpticalModuleHostTxFault (4613)", "CoherentModuleHostTxFault", "The alarm is raised when a device reports Host Tx Fault on a coherent optical interface."});
		codes.put("4614", new String[] {"CoherentOpticalModuleReferenceLockLoss (4614)", "ReferenceLockLoss", "The alarm is raised when a device reports loss of reference lock signal on a coherent optical interface."});
		codes.put("4615", new String[] {"CoherentOpticalModuleRxFault (4615)", "CoherentModuleRxFault", "The alarm is raised when a device reports Rx Fault on a coherent optical interface."});
		codes.put("4616", new String[] {"CoherentOpticalModuleTxFault (4616)", "CoherentModuleTxFault", "The alarm is raised when a device reports Tx Fault on a coherent optical interface."});
		codes.put("4617", new String[] {"EfmOamAlarm (4617)", "EFMOAMOperationalstateOutofService", "The alarm is raised when EFM Ignore status is Enabled and EFM Operation Status has a fault that is not"});
		codes.put("4618", new String[] {"WaveTrackerMissingPluggableVOA (4618)", "MissingPluggableVOA", "The alarm is raised when a device reports a power control high limit on a wavelength tracker interface."});
		codes.put("4624", new String[] {"IgmpMaxGrpSrcsLimitExceeded (4624)", "IgmpMaxGrpSrcsLimitExceeded", "The alarm is raised when an attempt is made to configure an IGMP group source for a group when the"});
		codes.put("4815", new String[] {"McIPsecPeerTunnelGroupMissing (4815)", "IncompleteConfig", "The alarm is raised when the 5620 SAM cannot find the peer MC IPsec tunnel group. This can be either"});
		codes.put("4816", new String[] {"McIPsecTunnelGroupDown", "ipsecTunnelGroupDown", "The alarm is raised when a MC IPsec tunnel group is operationally down while it is administratively up."});
		codes.put("4860", new String[] {"NatLsnSubscriberIcmpPortUsageHigh (4860)", "resourceFull", "The alarm is raised when the ICMP port usage of a large-scale NAT subscriber reaches the high or low"});
		codes.put("4861", new String[] {"NatLsnSubscriberSessionUsageHigh (4861)", "resourceFull", "The alarm is raised when the session usage of a large-scale NAT subscriber reaches the high watermark."});
		codes.put("4862", new String[] {"NatLsnSubscriberTcpPortUsageHigh (4862)", "resourceFull", "The alarm is raised when the TCP port usage of a large-scale NAT subscriber reaches the high or low"});
		codes.put("4863", new String[] {"NatLsnSubscriberUdpPortUsageHigh (4863)", "resourceFull", "The alarm is raised when the UDP port usage of a large-scale NAT subscriber reaches the high or low"});
		codes.put("4879", new String[] {"NTPOperDown (4879)", "NTPOperDown", "The alarm is generated when the NTP Operational State is down for NTP."});
		codes.put("4887", new String[] {"VRtrIfDDosDynamicExceeded", "ExceedingPolicingParameters", "The alarm is raised when the protocol on a particular network interface has been detected as"});
		codes.put("4888", new String[] {"VRtrIfDDosLocMonitorExceeded (4888)", "ExceedingPolicingParameters", "The alarm is raised when the local-monitoring-policer for a particular network interface has transitioned"});
		codes.put("4889", new String[] {"VRtrIfDDosStaticExceeded", "ExceedingPolicingParameters", "The alarm is raised when the static-policer on a particular network interface has been detected as"});
		codes.put("4890", new String[] {"SapDDosDynamicExceeded", "ExceedingPolicingParameters", "The alarm is raised when the protocol on a particular SAP has been detected as non-conformant to the"});
		codes.put("4891", new String[] {"SapDDosLocMonitorExceeded (4891)", "ExceedingPolicingParameters", "The alarm is raised when the local-monitoring-policer for a particular SAP has transitioned from a"});
		codes.put("4892", new String[] {"SapDDosStaticExceeded", "ExceedingPolicingParameters", "The alarm is raised when the static-policer on a particular SAP has been detected as non-conformant to"});
		codes.put("4893", new String[] {"macMoveRateExceededNonBlock (4893)", "MacMoveRateExceededNonBlock", "The alarm is raised when the SDP exceeds the Service Site's MAC Move Frequency even when"});
		codes.put("4898", new String[] {"LSRPATHDown (4898)", "LSRPATHDown", "The alarm is raised when the TP LSR Path Administrative State is Up and the Operational State is Down."});
		codes.put("4900", new String[] {"TPLSPDown (4900)", "TPLSPDown", "The alarm is raised when the TP LSP Administrative State is Up and the Operational State is Down. The"});
		codes.put("4901", new String[] {"TPLSPPATHDown (4901)", "TPLSPPATHDown", "The alarm is raised when the TP LSP Path Administrative State is Up and the Operational State is Down."});
		codes.put("4977", new String[] {"DHCPSFoLeaseUpdateFailedAddressConflict (4977)", "DHCPSFoLeaseUpdateFailedAddressConflict", "This alarm is raised when a address conflict lease update received from the failover peer cannot be"});
		codes.put("4978", new String[] {"DHCPSFoLeaseUpdateFailedHostConflict (4978)", "DHCPSFoLeaseUpdateFailedHostConflict", "This alarm is raised when a host conflict lease update received from the failover peer cannot be processed"});
		codes.put("4979", new String[] {"DHCPSFoLeaseUpdateFailedLeaseExpired (4979)", "DHCPSFoLeaseUpdateFailedLeaseExpired", "This alarm is raised when a lease expired lease update received from the failover peer cannot be"});
		codes.put("4980", new String[] {"DHCPSFoLeaseUpdateFailedMaxLeaseReached (4980)", "DHCPSFoLeaseUpdateFailedMaxLeaseReached", "This alarm is raised when a maximum reached lease update received from the failover peer cannot be"});
		codes.put("4981", new String[] {"DHCPSFoLeaseUpdateFailedPeerConflict (4981)", "DHCPSFoLeaseUpdateFailedPeerConflict", "This alarm is raised when a peer conflict lease update received from the failover peer cannot be processed"});
		codes.put("4982", new String[] {"DHCPSFoLeaseUpdateFailedPersistenceCongested (4982)", "DHCPSFoLeaseUpdateFailedPersistenceCongested", "This alarm is raised when a persistence congested lease update received from the failover peer cannot be"});
		codes.put("4983", new String[] {"DHCPSFoLeaseUpdateFailedRangeNotFound (4983)", "DHCPSFoLeaseUpdateFailedRangeNotFound", "This alarm is raised when a range not found lease update received from the failover peer cannot be"});
		codes.put("4984", new String[] {"DHCPSFoLeaseUpdateFailedSubnetNotFound (4984)", "DHCPSFoLeaseUpdateFailedSubnetNotFound", "This alarm is raised when a subnet not found lease update received from the failover peer cannot be"});
		codes.put("4985", new String[] {"DHCPSFoLeaseUpdateFailedfoShutdown (4985)", "DHCPSFoLeaseUpdateFailedfoShutdown", "This alarm is raised when a shutdown lease update received from the failover peer cannot be processed"});
		codes.put("4986", new String[] {"DHCPServerFailoverStateChange (4986)", "DHCPServerFailoverStateChanged", "The alarm is raised when the Local DHCP Server Failover has a state other than Normal."});
		codes.put("5120", new String[] {"NatMdaDetectsLoadSharingError (5120)", "NatMdaLoadSharingErrorDetected", "The alarm is raised when node is sending periodically at most every 10 seconds while a NAT ISA MDA"});
		codes.put("5122", new String[] {"NatDeterministicChange", "NatDeterministicMapChanged", "The alarm is raised when something changed in the Deterministic NAT map. Such a change may be"});
		codes.put("5123", new String[] {"NodeSuspended (5123)", "NodeSuspend", "The alarm is raised when the 5620 SAM detects an NE moved to suspend state as per user request."});
		codes.put("5154", new String[] {"PowerSupplyInputFeedDownAlarm (5154)", "powerSupplyInputFeedDown", "This alarm is generated if any one of the input feeds for a given power supply is not supplying power."});
		codes.put("5157", new String[] {"SubscriberSystemNextHopUsageHigh (5157)", "resourceFull", "The alarm is raised when the IP next-hop usage by subscriber managed routes reaches its high"});
		codes.put("5168", new String[] {"DHCPPoolFailoverStateChange (5168)", "DHCPPoolFailoverStateChanged", "The alarm is raised when the Local DHCP Pool Failover has a state other than Normal."});
		codes.put("5175", new String[] {"DiamAppMessageDropped", "diamAppMessageDropped", "The alarm is raised when the Diameter protocol has dropped a message"});
		codes.put("5188", new String[] {"AuthKeyConflict (5188)", "AuthKeyConflict", "The alarm is raised when both Authentication Key and RSVP Keychain are configured. RSVP Keychain will"});
		codes.put("5395", new String[] {"MldMaxGrpSrcsLimitExceeded (5395)", "MldMaxGrpSrcsLimitExceeded", "The alarm is raised when an attempt is made to configure an MLD group source for a group when the"});
		codes.put("5396", new String[] {"MldMaxSrcsLimitExceeded", "MldMaxSrcsLimitExceeded", "The alarm is raised when an attempt is made to configure an MLD source for a group when the number of"});
		codes.put("5397", new String[] {"NatLsnSubscriberIcmpPortUsgHigh (5397)", "resourceFull", "The alarm is raised when the ICMP port usage of a large-scale NAT subscriber reaches the high or low"});
		codes.put("5398", new String[] {"NatLsnSubscriberSessionUsgHigh (5398)", "resourceFull", "The alarm is raised when the session usage of a large-scale NAT subscriber reaches the high watermark."});
		codes.put("5399", new String[] {"NatLsnSubscriberTcpPortUsgHigh (5399)", "resourceFull", "The alarm is raised when the TCP port usage of a large-scale NAT subscriber reaches the high or low"});
		codes.put("5400", new String[] {"NatLsnSubscriberUdpPortUsgHigh (5400)", "resourceFull", "The alarm is raised when the UDP port usage of a large-scale NAT subscriber reaches the high or low"});
		codes.put("5405", new String[] {"OFFlowEntryDeploymentCreateFailed (5405)", "OFFlowEntryDeploymentCreateFailed", "The notification alarm is raised when the flow entry deployment create has failed."});
		codes.put("5406", new String[] {"OFFlowEntryDeploymentDeleteFailed (5406)", "OFFlowEntryDeploymentDeleteFailed", "The notification alarm is raised when the flow entry deployment create has failed."});
		codes.put("5407", new String[] {"OFLogicalPortStatusMplsTpNotSet (5407)", "OFLogicalPortStatusMplsTpNotSet", "The alarm is raised when the MPLS-TP flag is not set in the Logical Port Status."});
		codes.put("5408", new String[] {"OFLogicalPortStatusRsvpTeNotSet (5408)", "OFLogicalPortStatusRsvpTeNotSet", "The alarm is raised when the RSVP-TE flag is not set in the Logical Port Status."});
		codes.put("5409", new String[] {"OFSwitchDown (5409)", "OFSwitchDown", "The alarm is raised when the Operational State of an OFSwitch is Down and the Administrative State is"});
		codes.put("5415", new String[] {"CpmProtectionViolationSDPEntry (5415)", "denialOfService", "The alarm is raised when the overall packet arrival rate limit at the SDP is violated."});
		codes.put("5422", new String[] {"PowerSupplyInputFeedDown", "powerSupplyInputFeedDown", "This alarm is generated if any one of the input feeds for a given power supply is not supplying power."});
		codes.put("5436", new String[] {"AggregatedVFLPortDown", "connectivityIssue", "The alarm is generated when the aggregated virtual fabric link on the virtual chassis slot is down."});
		codes.put("5617", new String[] {"IOMEventOverflow (5617)", "IOMEventOverflow", "The alarm is generated when tmnxIomResStateClr, tmnxIomResExhausted and tmnxIomResHighLimitReached occur more than 200 times because of resource usage fluctuation. The IOM raises the final trap to indicate"});
		codes.put("5618", new String[] {"IOMResUtilizationLimit (5618)", "IOMResHighLimitReached", "The alarm is generated when the type of resources on IOM as specified by tmnxIomResourceType has"});
		codes.put("5656", new String[] {"SubSysChassMemoryUsageHi (5656)", "resourceFull", "This alarm is raised when the memory usage by subscriber management on this system or chassis"});
		codes.put("5660", new String[] {"VwmShelfCardIdMismatch", "VwmShelfCardIdMismatch", "The alarm is raised when the configured vwm card id is different than the equipped vwm card."});
		codes.put("5662", new String[] {"PortEtherSymMonSDAlarm", "etherPortSymMonSDThreholdExceededAlarm", "The alarm is raised when an Ethernet port Symbol Monitor Failure alarm condition is detected (Signal"});
		codes.put("5663", new String[] {"PortEtherSymMonSFAlarm", "etherPortSymMonSFThreholdExceededAlarm", "The alarm is raised when an Ethernet port Symbol Monitor Failure alarm condition is detected (Signal"});
		codes.put("8058", new String[] {"McOmcrStatFailedChanged", "McOmcrStatFailedChanged", "The alarm is raised when the value of the object tmnxMcOmcrStatFailed changes from 'notAct' to any of"});
		codes.put("8059", new String[] {"NatIsaGrpDegraded (8059)", "NatIsaGrpDegraded", "The alarm is raised when the NAT ISA group is degraded, while operationally still in service."});
		codes.put("8136", new String[] {"RPKISessionNotEstablished", "RPKISessionNotEstablished", "The notification alarm is raised when the RPKI Session is not established."});
		codes.put("8150", new String[] {"WlanGwIsaGrpDegraded", "WlanGwIsaGrpDegraded", "The alarm is raised when the WLAN GW ISA group is degraded, while operationally still in service."});
		codes.put("8378", new String[] {"DhcpSvrNoSubnetFixAddr", "dhcpSvrNoSubnetFixAddr", "This alarm can be generated for hosts configured with a fixed IP address in the local user database. If such"});
		codes.put("8383", new String[] {"GmplsLspDown (8383)", "GmplsLspDown", "The alarm is raised when the GMPLS LSP's Administrative State is Up and the Operational State is Down."});
		codes.put("8384", new String[] {"GmplsLspPathBindingDown", "GmplsLspPathBindingDown", "The alarm is raised when the GMPLS LSP-path binding's Administrative State is Up and the Operational"});
		codes.put("8385", new String[] {"MemberDown (8385)", "MemberDown", "The alarm is raised when the GMPLS tunnel group endpoint member's Administrative State is Up and the"});
		codes.put("8386", new String[] {"TeLinkDown (8386)", "protocolDown", "The alarm is raised when the GMPLS TE link's Administrative State is Up and the Operational State is"});
		codes.put("8387", new String[] {"SubscriberAuthError (8387)", "subAuthenticationError", "This alarm indicates that the system encountered a problem while trying to authenticate a subscriber."});
		codes.put("8390", new String[] {"ControlChannelDown (8390)", "protocolDown", "The alarm is raised when a Control Channel has an Operational State other than Up, and the"});
		codes.put("8402", new String[] {"DhcpLseStateRestoreProblem", "dhcpLseStateRestoreProblem", "This alarm is raised when an error is detected while processing a persistency record."});
		codes.put("8403", new String[] {"DhcpMiscellaneousProblem", "dhcpMiscellaneousProblem", "This alarm is raised when a miscellaneous DHCP problem occurs."});
		codes.put("8404", new String[] {"SubMcsRelatedProblem", "subMcsRelatedProblem", "This alarm is raised when a subscriber management specific problem occurs during Multi Chassis Syncing,"});
		codes.put("8405", new String[] {"PTPPortNoTimestamping", "PerformanceDegraded", "The PtpPortNoTimestamping notification is generated when a PTP port is created and the associated"});
		codes.put("8406", new String[] {"radiusServerOutOfService", "subAuthPlcyRadSerOperStatChg", "The alarm is raised when the RADIUS server is out of service."});
		codes.put("8409", new String[] {"DhcpLseStateMobilityError", "sapDHCPLseStateMobilityError", "This alarm indicates that the system was unable to perform a mobility check for this lease state."});
		codes.put("8410", new String[] {"PppoeNcpFailure (8410)", "sapPppoeNcpFailure", "This alarm indicates there is a NCP phase setup problem."});
		codes.put("8411", new String[] {"SapSubAuthError (8411)", "subAuthenticationError", "This alarm indicates that the system encountered a problem while trying to authenticate a subscriber."});
		codes.put("8416", new String[] {"SubRadSapCoAError (8416)", "changeOfAddressError", "This alarm indicates that system was unable to process a Change of Authorization (CoA) request from a"});
		codes.put("8427", new String[] {"DiamProxyOperationalStateChange (8427)", "DiameterProxyDown", "The alarm is raised when the Operational State of a Diameter Peer Proxy is Out Of Service."});
		codes.put("8992", new String[] {"PartialVPRNEncryption (8992)", "ConfigMismatch", "The alarm is raised when one or more sites are not encryption enabled in a VPRN service."});
		codes.put("9002", new String[] {"BITS2ReferenceLossOfSignal", "BITS2ReferenceLossOfSignal", "The alarm is raised when the BITS2 reference on an NE is not qualified due to Loss of Signal."});
		codes.put("9003", new String[] {"BITS2ReferenceOutOfFrequency", "BITS2ReferenceOutOfFrequency", "The alarm is raised when the BITS2 Reference on an NE is not qualified due to Out of frequency."});
		codes.put("9004", new String[] {"BITS2ReferenceOutOfPollInRange", "BITS2ReferenceOutOfPollInRange", "The alarm is raised when the BITS2 Reference on an NE is not qualified state due to Out of poll in range."});
		codes.put("9032", new String[] {"MinFreePfxThDepleted (9032)", "freePrefixesDepleted", "This Alarm is generated when the actual number of free prefixes with minimum free threshold length"});
		codes.put("9033", new String[] {"MinFreePfxThTooLow (9033)", "freePrefixesTooLow", "This Alarm is generated when the actual number of free prefixes with minimum free threshold length"});
		codes.put("9034", new String[] {"MinFreePoolThDepleted", "freePrefixesDepleted", "This Alarm is generated when the actual number of free prefixes with minimum free threshold length"});
		codes.put("9035", new String[] {"MinFreePoolThTooLow (9035)", "freePrefixesTooLow", "This Alarm is generated when the actual number of free prefixes with minimum free threshold length"});
		codes.put("9039", new String[] {"ProxyMcLocalStateChange", "ProxyMcLocalStateChange", "The alarm is raised when proxyMcLocalState of a Diameter Peer Proxy is changed. The states 'active' and"});
		codes.put("9049", new String[] {"SysLicenseExpiresSoon", "SystemLicenseExpiresSoon", "The alarm is raised when the license is due to expire soon."});
		codes.put("9050", new String[] {"SysLicenseInvalid (9050)", "SystemLicenseInvalid", "The alarm is raised when the license becomes invalid for the reason specified in Additional Text."});
		codes.put("9568", new String[] {"liMirrorLiNatLsnSubOperStateDown (9568)", "liMirrorLiNatLsnSubOperStateDown", "The alarm is raised when the Operational State of the NAT LSN subscriber is Down."});
		codes.put("9570", new String[] {"DeterministicNatMapOperDown (9570)", "DeterministicNatMapOperDown", "The alarm is raised when the Operational State of a Deterministic NAT Map is Down."});
		codes.put("9571", new String[] {"DeterministicNatPrefixOperDown (9571)", "DeterministicNatPrefixOperDown", "The alarm is raised when the Operational State of a Deterministic NAT Prefix is Down and the"});
		codes.put("9575", new String[] {"NatResourceProblem (9575)", "natResourceProblem", "The alarm is raised when resource problem is detected while attempting to activate some part of the NAT"});
		codes.put("9622", new String[] {"PowerSupplyInputFailure", "powerSupplyInputFailure", "Generated when one of the chassis's power source supplies fails."});
		codes.put("9623", new String[] {"PowerSupplyOutputFailure", "powerSupplyOutputFailure", "Generated when one of the chassis's power output fails."});
		codes.put("9644", new String[] {"PowerSupplyAcFailure (9644)", "powerSupplyAcFailure", "This notification is generated when an AC failure occurs on the power supply."});
		codes.put("9645", new String[] {"PowerSupplyDcFailure (9645)", "powerSupplyDcFailure", "This notification is generated when a DC failure occurs on the power supply."});
		codes.put("9646", new String[] {"PowerSupplyOverTemperature (9646)", "powerSupplyOverTemperature", "This notification is generated when a power supply temperature surpasses the threshold of the particular"});
		codes.put("10040", new String[] {"CmuManagementFailed", "ftpFailed", "The alarm is raised when SAM fails to manage a 9430 Compact Mobility Unit due to an FTP failure."});
		codes.put("10273", new String[] {"BareMetalReachabilityDown", "BareMetalReachabilityDownOrDeleted", "The alarm is raised when Bare Metal server is reachability down."});
		codes.put("11058", new String[] {"PccRuleInsertSpaceThresholdAlarm (11058)", "UtilizationExceedConfiguredLimit", "The alarm is raised when the utilization of a filter entry range that is reserved for filter entry insertion"});
		codes.put("11059", new String[] {"PccRuleInsertedFltrEntryDropped (11059)", "FilterEntryDropped", "The alarm is raised when a request to insert a filter entry is not successful for a PCC rule application."});
		codes.put("11062", new String[] {"UplinkDown (11062)", "ConnectionsAllDown", "The alarm is raised when all connections of the Uplink are down."});
		codes.put("11063", new String[] {"UplinkPartiallyDown (11063)", "ConnectionsDown", "The alarm is raised when some connections of the Uplink are down."});
		codes.put("11087", new String[] {"FirmwareErrorAlarm (11087)", "firmwareError", "The alarm is raised when the device installed in the shelf has an EEPROM that does not contain the"});
		codes.put("11089", new String[] {"IPSecIsaMemoryHigh (11089)", "resourceFull", "The Alarm is generated when the ISA card memory usage ratio has reached the high watermark ,which is"});
		codes.put("11090", new String[] {"IPSecIsaMemoryMax (11090)", "resourceFull", "The Alarm is generated when the ISA card memory usage ratio has reached the Maximum which is"});
		codes.put("11101", new String[] {"MepFacilityFault (11101)", "MepFacilityFault", "[CAUSE] The tmnxDot1agCfmMepFcltyFaultRaise notification is generated when the associated facility"});
		codes.put("11110", new String[] {"OesOpticalTrnspndrMiscFailAlarm (11110)", "opticalTrnspndrMiscFail", "The alarm is raised when a non-service affecting hardware defect was detected on the card."});
		codes.put("11111", new String[] {"OesRedundancyFail (11111)", "RedundancyFail", "The alarm is raised when when the inactive equipment controller card in the OES is not providing"});
		codes.put("11179", new String[] {"NoSFMConfigured (11179)", "NoSFMConfigured", "The alarm is raised when none of the SFM are configured."});
		codes.put("11185", new String[] {"PXCAdministrativelyDown", "portCrossConnectAdministrativelyDown", "The alarm is raised when the PXC AdministrativelyDown."});
		codes.put("11186", new String[] {"PXCDown (11186)", "inoperablePortCrossConnect", "The alarm is raised when the PXC is OperationallyDown."});
		codes.put("11187", new String[] {"RipInterfaceDown (11187)", "underlyingResourceUnavailable", "The alarm is raised when an RIP interface is operationally down."});
		codes.put("11188", new String[] {"CpmProtectionViolationVdoSvcEntry (11188)", "denialOfService", "The alarm is raised when a per-source rate limit violation is detected for a client address of a Real-time"});
		codes.put("11189", new String[] {"CpmProtectionViolationVdoVrtrClientEntry (11189)", "denialOfService", "The alarm is raised when a per-source rate limit violation is detected for a client address of a Real-time"});
		codes.put("11462", new String[] {"adjacencyDown (11462)", "adjacencyDown", "The alarm is raised when the Operational State of a adjacency is Down, for example, because of one of"});
		codes.put("11464", new String[] {"inSufficientBandwidth (11464)", "inSufficientBandwidth", "The alarm is raised when a deployed adjacency doesnt have sufficent bandwidth."});
		codes.put("11465", new String[] {"nonDeployedAdjacencyExists", "nonDeployedAdjacencyExists", "The alarm is raised when a deployed adjacency is deleted on the site."});
		//codes.put("", new String[] {"liMirrorLiNat64SubOperStateDown", "liMirrorLiNatLsnSubOperStateDown", "The alarm is raised when the Operational State of the NAT64 subscriber is Down."});
		//codes.put("", new String[] {"liMirrorLiNatL2awSubOperStateDown", "liMirrorLiNatL2awSubOperStateDown", "The alarm is raised when the Operational State of the NAT L2 Aware subscriber is Down."});
		//codes.put("", new String[] {"UnrecommendedNAT64DestinationPrefix", "unrecommendedConfiguration", "This alarm is raised when the bits [64-71] of NAT64 destination prefix are non-zero for prefix length of 96."});

	}
	
	
	public static Map<String, String[]> getTable() {
		return HashTable.codes;
	}

}
